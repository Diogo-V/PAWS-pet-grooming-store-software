Animal:
name: animal nickname -> string
owners: clients which own the pet -> list of clients (owners)
typeOfAnimal: type of animal -> string
weight: animal's weight -> double
birthDate: animal's birth date -> datetime
history: record of all of the services (with dates) provided to the pet -> list of appointments
observations: notes about the pet -> string
appointment: set of services appointed to the pet -> list of appointments

Client:
first: first name -> string
last: last name -> string
email: email address -> string
phone: list of phone numbers -> list of integers with 9 digits
nif: tax identification number -> 9 digit integer
address: where the client lives -> string
pets: client's pet's names -> list of Animal

Services:
description: type of service provided -> string
price: price of the service -> double

Appointment:
services: services provided to the pet -> list of services
dateOfAppointment: date when the service will be provided -> date
animal: animal object that holds this appointment -> animal



# -------------------------------------------------------------------------------------------------------------------- #
# ---------------------------------------------- SQLITE FUNCTIONS ---------------------------------------------------- #
# -------------------------------------------------------------------------------------------------------------------- #


# Create a table of customers holding their names and emails. Both of them are considered text data types
def createsAnimalsTable():
    """
    Creates a table of animals inside our database.

    Database inputs:
    > name: animal nickname -> string
    > owners: clients which hold the pet -> list of clients (owners)
    > typeOfAnimal: type of animal -> string
    > weight: animal's weight -> double
    > birthDate: animal's birth date -> datetime
    > history: record of all of the services (with dates) provided to the pet -> list of appointments
    > observations: Notes about the pet -> String
    > appointment: set of services appointed to the pet -> list of appointments
    """
    connection = sqlite3.connect("database/database.sqlite", detect_types=sqlite3.PARSE_DECLTYPES)
    cursor = connection.cursor()
    cursor.execute("""CREATE TABLE animals (
        id INTEGER PRIMARY KEY,
        name text,
        ownersId foreign key,
        typeOfAnimal text,
        weight real,
        hairType text,
        birthDate timestamp,
        history text
        )""")
    connection.close()


# Show contents of the table
def showTable():
    connection = sqlite3.connect("database/database.sqlite")
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT rowid, * FROM  animals")
        for item in cursor.fetchall():
            print(item)
    except sqlite3.Error:
        if connection:
            connection.rollback()
    finally:
        if connection:
            connection.close()


# Adds a new record to the table
def addRecord(first, last, email):
    connection = sqlite3.connect("database/database.sqlite")
    cursor = connection.cursor()  # Creates a cursor. It is used to do everything in our table
    cursor.execute("INSERT INTO customers VALUES (?, ?, ?)", (first, last, email))
    connection.commit()
    connection.close()


# Deletes a record from the database. ID has to be passed as a string when calling function
def deleteRecord(rowId):
    connection = sqlite3.connect("database/database.sqlite")
    cursor = connection.cursor()  # Creates a cursor. It is used to do everything in our table
    cursor.execute("DELETE from customers WHERE rowid = (?)", rowId)
    connection.commit()
    connection.close()


# Adds a lot of records at the same time
def addManyRecords(recordsList):
    connection = sqlite3.connect("database/database.sqlite")
    cursor = connection.cursor()  # Creates a cursor. It is used to do everything in our table
    cursor.executemany("INSERT INTO customers VALUES (?, ?, ?)", recordsList)
    connection.commit()
    connection.close()
